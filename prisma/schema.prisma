// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  password  String
  name      String
  onboardingStatus OnboardingStatus? @default(ACCOUNT_CREATION)
  accounts  Account[]
  transactions Transaction[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Account {
  id          String      @id @default(cuid())
  name        String
  type        String
  balance     Float
  currency    String?      @default("USD")
  monthlyExpenses Float @default(0)
  currencyStyle String? @default("USD")
  goals     Goal[]
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  transactions Transaction[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Transaction {
  id          String      @id @default(cuid())
  amount      Float
  type        TransactionType
  category    Category
  description String
  date        DateTime
  goalId      String?
  goal        Goal?       @relation(fields: [goalId], references: [id])
  accountId   String
  account     Account     @relation(fields: [accountId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now()) // example: 2025-02-15T00:00:00.000Z
  updatedAt   DateTime    @updatedAt
}


enum OnboardingStatus {
  ACCOUNT_CREATION
  PERSONAL_INFO
  INITIAL_BALANCE
  MONTHLY_BUDGET
  CATEGORIES_SETUP
  NOTIFICATIONS
  COMPLETE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum Category {
  FOOD
  TRANSPORT
  HOUSING
  UTILITIES
  ENTERTAINMENT
  HEALTHCARE
  SHOPPING
  OTHERS
  SAVINGS
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Goal {
  id          String      @id @default(cuid())
  name        String
  targetAmount Float
  currentAmount Float     @default(0)
  deadline    DateTime
  status      GoalStatus  @default(IN_PROGRESS)
  accountId   String
  account     Account     @relation(fields: [accountId], references: [id])
  transactions Transaction[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}